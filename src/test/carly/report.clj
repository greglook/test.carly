(ns test.carly.report
  "Integration code for wedding generative `test.check` functions and
  `clojure.test` assertion macros."
  (:require
    [clojure.test :as ctest]
    [puget.printer :as puget]))


; TODO: affordance for setting pretty-printer handlers


;; ## Helper Functions

(defmacro capture-reports
  "Capture any clojure.test reports generated by the body. Returns a vector
  containing the evaluated result, followed by a vector of reports."
  [& body]
  `(let [reports# (atom [])]
     [(binding [ctest/report (partial swap! reports# conj)]
        ~@body)
      @reports#]))


(defn publish!
  "Publish a collection of reports to clojure.test."
  [reports]
  (run! ctest/report reports))


(defn wrap-report-check
  "Wrap the given sequence of forms such that it returns false if there is a
  failed clojure.test assertion in the body. If there are no assertions,
  returns the result of evaluating the body."
  [body]
  `(let [[result# reports#] (capture-reports ~@body)]
     (publish! reports#)
     (if (empty? reports#)
       result#
       (not (some (comp #{:fail :error} :type) reports#)))))



;; ## Test Property

; TODO: move to core?
(defn report-test-summary
  "Emit clojure.test reports for the summarized results of the generative
  tests."
  [summary]
  (if (and (:result summary) (not (instance? Throwable (:result summary))))
    (let [result (:result summary)]
      #_ ; success
      {:result truthy
       :num-tests num-trials
       :seed seed}
      (ctest/report
        (assoc summary :type ::summary)))
    (let [result (:test.carly.check/result (meta (get-in summary [:shrunk :smallest])))]
      (prn :shrunk-result result)
      #_ ; fail
      {:result false-or-exception
       :seed seed
       :failing-size size
       :num-tests (inc trial-number)
       :fail (vec failing-args)
       :shrunk {:total-nodes-visited total-nodes-visited
                :depth depth
                :result (:result smallest)
                :smallest (:args smallest)}}
      ; TODO: publish shrunk reports
      (publish! (:reports result))
      (ctest/report
        (-> summary (dissoc :result) (assoc :type ::shrunk))))))











;;;;; REVIEW BELOW THIS LINE ;;;;;

:test.carly/trial-start

:test.carly/test-start
:test.carly/run-ops
:test.carly/test-pass
:test.carly/test-fail

:test.carly/trial-pass
:test.carly/trial-fail

:test.carly/summary
:test.carly/shrunk


;; Report a successful generative test summary.
(defmethod ctest/report ::summary
  [summary]
  (ctest/with-test-out
    (newline)
    (printf "Generative tests passed with seed %s:\n" (:seed summary))
    ; TODO: better formatting
    (prn summary)))


;; Report the shrunk value of a failed test summary.
(defmethod ctest/report ::shrunk
  [summary]
  (ctest/with-test-out
    (newline)
    (printf "Tests failed with seed %s - smallest case:\n" (:seed summary))
    ; TODO: more shrink stats
    (prn (dissoc (:shrunk summary) :smallest))
    (let [[context op-seqs] (get-in summary [:shrunk :smallest])]
      (newline)
      (println "Context:")
      (puget/cprint context)
      (newline)
      (println "Operation sequences:")
      (doseq [ops op-seqs]
        (puget/cprint ops)))))


(defn report-filter
  "Test reporting function which silently counts simple result types :pass, :fail,
  and :error as namespace variants, and calls report-fn with all others."
  [report-fn report]
  (case (:type report)
    (:pass :fail :error) (ctest/inc-report-counter :pass)
    (report-fn report)))
